generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {

  id                    String         @id
  username              String         @unique
  displayName           String
  email                 String?        @unique
  passwordHash          String?
  googleId              String?        @unique
  avatarUrl             String?
  bio                   String?
  sessions              Session[]
  posts                 Post[]

  following    Follow[]  @relation("Following")
  followers    Follow[]  @relation("Followers")
  createdAt DateTime @default(now())
  likes        Like[]
  bookmarks             Bookmark[]
  comments     Comment[]
  recievedNotifications Notification[] @relation("Recipient")
  issuedNotifications Notification[] @relation("Issuer")

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  followerId  String
  followingId String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {

  id                  String         @id @default(cuid())
  content             String
  userId              String
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Media[]
  likes       Like[]
  bookmarks           Bookmark[]
  comments    Comment[]
  linkedNotifications Notification[]
  createdAt DateTime @default(now())


  @@map("posts")
}

model Report {
  id        String   @id @default(cuid())
  postId    String?
  userId    String
  reason    String
  createdAt DateTime @default(now())
  status    String   @default("Received")
  @@map("reports")
}

model Media {
  id        String    @id @default(cuid())
  postId    String?
  type      MediaType
  url       String
  createdAt DateTime  @default(now())
  post      Post?     @relation(fields: [postId], references: [id])

  @@map("post_media")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("bookmarks")
}
model Notification {
    id     String @id @default(cuid())
    recipientId String
    recipient   User   @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
    issuerId String
    issuer   User   @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
    postId String?
    post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
    type NotificationType
    read Boolean @default(false)
    createdAt DateTime @default(now())
    @@map("notificiations")

}
enum MediaType {
  IMAGE
  VIDEO
}
enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
