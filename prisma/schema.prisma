generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                               String           @id
  username                                         String           @unique
  displayName                                      String
  email                                            String?          @unique
  passwordHash                                     String?
  googleId                                         String?          @unique
  avatarUrl                                        String?
  bio                                              String?
  createdAt                                        DateTime         @default(now())
  bookmarks                                        Bookmark[]
  comments                                         Comment[]
  following                                        Follow[]         @relation("Following")
  followers                                        Follow[]         @relation("Followers")
  likes                                            Like[]
  notificiations_notificiations_issuerIdTousers    notificiations[] @relation("notificiations_issuerIdTousers")
  notificiations_notificiations_recipientIdTousers notificiations[] @relation("notificiations_recipientIdTousers")
  posts                                            Post[]
  sessions                                         Session[]

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  followerId  String
  followingId String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id             String           @id @default(cuid())
  content        String
  userId         String
  createdAt      DateTime         @default(now())
  bookmarks      Bookmark[]
  comments       Comment[]
  likes          Like[]
  notificiations notificiations[]
  attachments    Media[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Report {
  id        String   @id @default(cuid())
  postId    String?
  userId    String
  reason    String
  createdAt DateTime @default(now())
  status    String   @default("Received")
  @@map("reports")
}

model Media {
  id        String    @id @default(cuid())
  postId    String?
  type      MediaType
  url       String
  createdAt DateTime  @default(now())
  post      Post?     @relation(fields: [postId], references: [id])

  @@map("post_media")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("bookmarks")
}

model notificiations {
  id                                      String           @id
  recipientId                             String
  issuerId                                String
  postId                                  String?
  read                                    Boolean          @default(false)
  createdAt                               DateTime         @default(now())
  type                                    NotificationType
  users_notificiations_issuerIdTousers    User             @relation("notificiations_issuerIdTousers", fields: [issuerId], references: [id], onDelete: Cascade)
  posts                                   Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  users_notificiations_recipientIdTousers User             @relation("notificiations_recipientIdTousers", fields: [recipientId], references: [id], onDelete: Cascade)
}

enum MediaType {
  IMAGE
  VIDEO
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
